//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Monster = newMonsterTable("", "monster", "")

type monsterTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnInteger
	Family           sqlite.ColumnString
	Name             sqlite.ColumnString
	Altname          sqlite.ColumnString
	Size             sqlite.ColumnString
	Type             sqlite.ColumnString
	Descriptor       sqlite.ColumnString
	HitDice          sqlite.ColumnString
	Initiative       sqlite.ColumnString
	Speed            sqlite.ColumnString
	ArmorClass       sqlite.ColumnString
	BaseAttack       sqlite.ColumnString
	Grapple          sqlite.ColumnString
	Attack           sqlite.ColumnString
	FullAttack       sqlite.ColumnString
	Space            sqlite.ColumnString
	Reach            sqlite.ColumnString
	SpecialAttacks   sqlite.ColumnString
	SpecialQualities sqlite.ColumnString
	Saves            sqlite.ColumnString
	Abilities        sqlite.ColumnString
	Skills           sqlite.ColumnString
	BonusFeats       sqlite.ColumnString
	Feats            sqlite.ColumnString
	EpicFeats        sqlite.ColumnString
	Environment      sqlite.ColumnString
	Organization     sqlite.ColumnString
	ChallengeRating  sqlite.ColumnString
	Treasure         sqlite.ColumnString
	Alignment        sqlite.ColumnString
	Advancement      sqlite.ColumnString
	LevelAdjustment  sqlite.ColumnString
	SpecialAbilities sqlite.ColumnString
	StatBlock        sqlite.ColumnString
	FullText         sqlite.ColumnString
	Reference        sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MonsterTable struct {
	monsterTable

	EXCLUDED monsterTable
}

// AS creates new MonsterTable with assigned alias
func (a MonsterTable) AS(alias string) *MonsterTable {
	return newMonsterTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MonsterTable with assigned schema name
func (a MonsterTable) FromSchema(schemaName string) *MonsterTable {
	return newMonsterTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MonsterTable with assigned table prefix
func (a MonsterTable) WithPrefix(prefix string) *MonsterTable {
	return newMonsterTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MonsterTable with assigned table suffix
func (a MonsterTable) WithSuffix(suffix string) *MonsterTable {
	return newMonsterTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMonsterTable(schemaName, tableName, alias string) *MonsterTable {
	return &MonsterTable{
		monsterTable: newMonsterTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newMonsterTableImpl("", "excluded", ""),
	}
}

func newMonsterTableImpl(schemaName, tableName, alias string) monsterTable {
	var (
		IDColumn               = sqlite.IntegerColumn("id")
		FamilyColumn           = sqlite.StringColumn("family")
		NameColumn             = sqlite.StringColumn("name")
		AltnameColumn          = sqlite.StringColumn("altname")
		SizeColumn             = sqlite.StringColumn("size")
		TypeColumn             = sqlite.StringColumn("type")
		DescriptorColumn       = sqlite.StringColumn("descriptor")
		HitDiceColumn          = sqlite.StringColumn("hit_dice")
		InitiativeColumn       = sqlite.StringColumn("initiative")
		SpeedColumn            = sqlite.StringColumn("speed")
		ArmorClassColumn       = sqlite.StringColumn("armor_class")
		BaseAttackColumn       = sqlite.StringColumn("base_attack")
		GrappleColumn          = sqlite.StringColumn("grapple")
		AttackColumn           = sqlite.StringColumn("attack")
		FullAttackColumn       = sqlite.StringColumn("full_attack")
		SpaceColumn            = sqlite.StringColumn("space")
		ReachColumn            = sqlite.StringColumn("reach")
		SpecialAttacksColumn   = sqlite.StringColumn("special_attacks")
		SpecialQualitiesColumn = sqlite.StringColumn("special_qualities")
		SavesColumn            = sqlite.StringColumn("saves")
		AbilitiesColumn        = sqlite.StringColumn("abilities")
		SkillsColumn           = sqlite.StringColumn("skills")
		BonusFeatsColumn       = sqlite.StringColumn("bonus_feats")
		FeatsColumn            = sqlite.StringColumn("feats")
		EpicFeatsColumn        = sqlite.StringColumn("epic_feats")
		EnvironmentColumn      = sqlite.StringColumn("environment")
		OrganizationColumn     = sqlite.StringColumn("organization")
		ChallengeRatingColumn  = sqlite.StringColumn("challenge_rating")
		TreasureColumn         = sqlite.StringColumn("treasure")
		AlignmentColumn        = sqlite.StringColumn("alignment")
		AdvancementColumn      = sqlite.StringColumn("advancement")
		LevelAdjustmentColumn  = sqlite.StringColumn("level_adjustment")
		SpecialAbilitiesColumn = sqlite.StringColumn("special_abilities")
		StatBlockColumn        = sqlite.StringColumn("stat_block")
		FullTextColumn         = sqlite.StringColumn("full_text")
		ReferenceColumn        = sqlite.StringColumn("reference")
		allColumns             = sqlite.ColumnList{IDColumn, FamilyColumn, NameColumn, AltnameColumn, SizeColumn, TypeColumn, DescriptorColumn, HitDiceColumn, InitiativeColumn, SpeedColumn, ArmorClassColumn, BaseAttackColumn, GrappleColumn, AttackColumn, FullAttackColumn, SpaceColumn, ReachColumn, SpecialAttacksColumn, SpecialQualitiesColumn, SavesColumn, AbilitiesColumn, SkillsColumn, BonusFeatsColumn, FeatsColumn, EpicFeatsColumn, EnvironmentColumn, OrganizationColumn, ChallengeRatingColumn, TreasureColumn, AlignmentColumn, AdvancementColumn, LevelAdjustmentColumn, SpecialAbilitiesColumn, StatBlockColumn, FullTextColumn, ReferenceColumn}
		mutableColumns         = sqlite.ColumnList{FamilyColumn, NameColumn, AltnameColumn, SizeColumn, TypeColumn, DescriptorColumn, HitDiceColumn, InitiativeColumn, SpeedColumn, ArmorClassColumn, BaseAttackColumn, GrappleColumn, AttackColumn, FullAttackColumn, SpaceColumn, ReachColumn, SpecialAttacksColumn, SpecialQualitiesColumn, SavesColumn, AbilitiesColumn, SkillsColumn, BonusFeatsColumn, FeatsColumn, EpicFeatsColumn, EnvironmentColumn, OrganizationColumn, ChallengeRatingColumn, TreasureColumn, AlignmentColumn, AdvancementColumn, LevelAdjustmentColumn, SpecialAbilitiesColumn, StatBlockColumn, FullTextColumn, ReferenceColumn}
	)

	return monsterTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Family:           FamilyColumn,
		Name:             NameColumn,
		Altname:          AltnameColumn,
		Size:             SizeColumn,
		Type:             TypeColumn,
		Descriptor:       DescriptorColumn,
		HitDice:          HitDiceColumn,
		Initiative:       InitiativeColumn,
		Speed:            SpeedColumn,
		ArmorClass:       ArmorClassColumn,
		BaseAttack:       BaseAttackColumn,
		Grapple:          GrappleColumn,
		Attack:           AttackColumn,
		FullAttack:       FullAttackColumn,
		Space:            SpaceColumn,
		Reach:            ReachColumn,
		SpecialAttacks:   SpecialAttacksColumn,
		SpecialQualities: SpecialQualitiesColumn,
		Saves:            SavesColumn,
		Abilities:        AbilitiesColumn,
		Skills:           SkillsColumn,
		BonusFeats:       BonusFeatsColumn,
		Feats:            FeatsColumn,
		EpicFeats:        EpicFeatsColumn,
		Environment:      EnvironmentColumn,
		Organization:     OrganizationColumn,
		ChallengeRating:  ChallengeRatingColumn,
		Treasure:         TreasureColumn,
		Alignment:        AlignmentColumn,
		Advancement:      AdvancementColumn,
		LevelAdjustment:  LevelAdjustmentColumn,
		SpecialAbilities: SpecialAbilitiesColumn,
		StatBlock:        StatBlockColumn,
		FullText:         FullTextColumn,
		Reference:        ReferenceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
